{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "DC/OS Cluster",
  "Mappings": {
    "CENTOS7AMI": {
      "ap-south-1": {
        "AMI": "ami-95cda6fa"
      },
      "ap-northeast-2": {
        "AMI": "ami-c74789a9"
      },
      "ap-southeast-1": {
        "AMI": "ami-f068a193"
      },
      "ap-southeast-2": {
        "AMI": "ami-fedafc9d"
      },
      "ap-northeast-1": {
        "AMI": "ami-eec1c380"
      },
      "ca-central-1": {
        "AMI": "ami-af62d0cb"
      },
      "eu-central-1": {
        "AMI": "ami-9bf712f4"
      },
      "eu-west-1": {
        "AMI": "ami-7abd0209"
      },
      "eu-west-2": {
        "AMI": "ami-bb373ddf"
      },
      "sa-east-1": {
        "AMI": "ami-26b93b4a"
      },
      "us-east-1": {
        "AMI": "ami-6d1c2007"
      },
      "us-east-2": {
        "AMI": "ami-6a2d760f"
      },
      "us-west-1": {
        "AMI": "ami-af4333cf"
      },
      "us-west-2": {
        "AMI": "ami-d2c924b2"
      }
    },
    "DNSMAPPING": {
      "ap-south-1": {
        "NAME": "ap-south-1.compute.internal"
      },
      "ap-northeast-2": {
        "NAME": "ap-northeast-2.compute.internal"
      },
      "ap-southeast-1": {
        "NAME": "ap-southeast-1.compute.internal"
      },
      "ap-southeast-2": {
        "NAME": "ap-southeast-2.compute.internal"
      },
      "ap-northeast-1": {
        "NAME": "ap-northeast-1.compute.internal"
      },
      "ca-central-1": {
        "NAME": "ca-central-1.compute.internal"
      },
      "eu-central-1": {
        "NAME": "eu-central-1.compute.internal"
      },
      "eu-west-1": {
        "NAME": "eu-west-1.compute.internal"
      },
      "eu-west-2": {
        "NAME": "eu-west-2.compute.internal"
      },
      "sa-east-1": {
        "NAME": "sa-east-1.compute.internal"
      },
      "us-east-1": {
        "NAME": "ec2.internal"
      },
      "us-east-2": {
        "NAME": "us-east-2.compute.internal"
      },
      "us-west-1": {
        "NAME": "us-west-1.compute.internal"
      },
      "us-west-2": {
        "NAME": "us-west-2.compute.internal"
      }
    },
    "VARIABLES": {
      "MASTER": {
        "TYPE": "t2.micro",
        "SPOTPRICE": "0.012",
        "ROOTDISK": "10",
        "COUNT": "3"
      },
      "PRIVATEAGENT": {
        "TYPE": "t2.micro",
        "SPOTPRICE": "0.012",
        "ROOTDISK": "10",
        "COUNT": "3"
      },
      "PUBLICAGENT": {
        "TYPE": "t2.micro",
        "SPOTPRICE": "0.012",
        "ROOTDISK": "10",
        "COUNT": "3"
      },
      "NETWORK": {
        "VPC": "10.100.0.0/16",
        "USEAST1VPC": "10.200.0.0/16",
        "PRIVATESUBNETa": "10.100.32.0/20",
        "PRIVATESUBNETb": "10.100.64.0/20",
        "PRIVATESUBNETc": "10.100.96.0/20",
        "PUBLICSUBNETa": "10.100.48.0/20",
        "PUBLICSUBNETb": "10.100.80.0/20",
        "PUBLICSUBNETc": "10.100.112.0/20",
        "AZa": "us-east-1a",
        "AZb": "us-east-1b",
        "AZc": "us-east-1c"
      },
      "RDS": {
        "DBNAME": "database01",
        "USER": "db01admin",
        "PASSWORD": "H4ugyFX2oL9%BYEmx8;Z",
        "TYPE": "db.t2.medium",
        "STORAGE": 20
      },
      "TIMEOUT": {
        "INSTANCE": "PT90M",
        "STACK": "PT90M"
      },
      "STACK": {
        "ADMINLOCATION": "100.101.102.103/32",
        "KEYNAME": "ssh-key",
        "OAUTHENABLED": "false"
      }
    }
  },
  "Outputs": {
    "PublicSlaveDnsAddress": {
      "Description": "Public slaves",
      "Value": {
        "Fn::GetAtt": [
          "elb_agent_public_external",
          "DNSName"
        ]
      }
    },
    "bucket00ex": {
      "Description": "Exhibitor S3 bucket name",
      "Value": {
        "Ref": "bucket00ex"
      }
    },
    "DnsAddress": {
      "Description": "Mesos Master",
      "Value": {
        "Fn::GetAtt": [
          "elb_master_external",
          "DNSName"
        ]
      }
    }
  },
  "Resources": {
    "bucket00ex": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain"
    },

    "eip_a": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": "vpc_gateway_attachment",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "eip_b": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": "vpc_gateway_attachment",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "eip_c": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": "vpc_gateway_attachment",
      "Properties": {
        "Domain": "vpc"
      }
    },

    "vpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "Tags": [
          {
            "Value": {
              "Ref": "AWS::StackName"
            },
            "Key": "Application"
          },
          {
            "Value": "Public",
            "Key": "Network"
          }
        ],
        "EnableDnsHostnames": "true",
        "EnableDnsSupport": "true",
        "CidrBlock": {
          "Fn::FindInMap": [
            "VARIABLES",
            "NETWORK",
            "VPC"
          ]
        }
      }
    },

    "subnet_private_a": {
      "Type": "AWS::EC2::Subnet",
      "DependsOn": "vpc",
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        },
        "Tags": [
          {
            "Value": {
              "Ref": "AWS::StackName"
            },
            "Key": "Application"
          },
          {
            "Value": "Private",
            "Key": "Network"
          }
        ],
        "AvailabilityZone": {
          "Fn::FindInMap": [
            "VARIABLES",
            "NETWORK",
            "AZa"
          ]
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "VARIABLES",
            "NETWORK",
            "PRIVATESUBNETa"
          ]
        }
      }
    },
    "subnet_private_b": {
      "Type": "AWS::EC2::Subnet",
      "DependsOn": "vpc",
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        },
        "Tags": [
          {
            "Value": {
              "Ref": "AWS::StackName"
            },
            "Key": "Application"
          },
          {
            "Value": "Private",
            "Key": "Network"
          }
        ],
        "AvailabilityZone": {
          "Fn::FindInMap": [
            "VARIABLES",
            "NETWORK",
            "AZb"
          ]
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "VARIABLES",
            "NETWORK",
            "PRIVATESUBNETb"
          ]
        }
      }
    },
    "subnet_private_c": {
      "Type": "AWS::EC2::Subnet",
      "DependsOn": "vpc",
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        },
        "Tags": [
          {
            "Value": {
              "Ref": "AWS::StackName"
            },
            "Key": "Application"
          },
          {
            "Value": "Private",
            "Key": "Network"
          }
        ],
        "AvailabilityZone": {
          "Fn::FindInMap": [
            "VARIABLES",
            "NETWORK",
            "AZc"
          ]
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "VARIABLES",
            "NETWORK",
            "PRIVATESUBNETc"
          ]
        }
      }
    },

    "subnet_public_a": {
      "Type": "AWS::EC2::Subnet",
      "DependsOn": "vpc",
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        },
        "Tags": [
          {
            "Value": {
              "Ref": "AWS::StackName"
            },
            "Key": "Application"
          },
          {
            "Value": "Public",
            "Key": "Network"
          }
        ],
        "AvailabilityZone": {
          "Fn::FindInMap": [
            "VARIABLES",
            "NETWORK",
            "AZa"
          ]
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "VARIABLES",
            "NETWORK",
            "PUBLICSUBNETa"
          ]
        }
      }
    },
    "subnet_public_b": {
      "Type": "AWS::EC2::Subnet",
      "DependsOn": "vpc",
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        },
        "Tags": [
          {
            "Value": {
              "Ref": "AWS::StackName"
            },
            "Key": "Application"
          },
          {
            "Value": "Public",
            "Key": "Network"
          }
        ],
        "AvailabilityZone": {
          "Fn::FindInMap": [
            "VARIABLES",
            "NETWORK",
            "AZb"
          ]
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "VARIABLES",
            "NETWORK",
            "PUBLICSUBNETb"
          ]
        }
      }
    },
    "subnet_public_c": {
      "Type": "AWS::EC2::Subnet",
      "DependsOn": "vpc",
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        },
        "Tags": [
          {
            "Value": {
              "Ref": "AWS::StackName"
            },
            "Key": "Application"
          },
          {
            "Value": "Public",
            "Key": "Network"
          }
        ],
        "AvailabilityZone": {
          "Fn::FindInMap": [
            "VARIABLES",
            "NETWORK",
            "AZc"
          ]
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "VARIABLES",
            "NETWORK",
            "PUBLICSUBNETc"
          ]
        }
      }
    },

    "nat_gateway_a": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "eip_a",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "subnet_public_a"
        }
      }
    },
    "nat_gateway_b": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "eip_b",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "subnet_public_b"
        }
      }
    },
    "nat_gateway_c": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "eip_c",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "subnet_public_c"
        }
      }
    },

    "efs_fs": {
      "Type": "AWS::EFS::FileSystem",
      "Properties": {
        "FileSystemTags": [
          {
            "Key": "Name",
            "Value": "dcos-admin filesystem"
          }
        ],
        "PerformanceMode": "generalPurpose"
      }
    },
    "efs_mounttarget_a": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": {
          "Ref": "efs_fs"
        },
        "SecurityGroups": [
          {
            "Ref": "security_group_agent_private"
          }
        ],
        "SubnetId": {
          "Ref": "subnet_private_a"
        }
      }
    },
    "efs_mounttarget_b": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": {
          "Ref": "efs_fs"
        },
        "SecurityGroups": [
          {
            "Ref": "security_group_agent_private"
          }
        ],
        "SubnetId": {
          "Ref": "subnet_private_b"
        }
      }
    },
    "efs_mounttarget_c": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": {
          "Ref": "efs_fs"
        },
        "SecurityGroups": [
          {
            "Ref": "security_group_agent_private"
          }
        ],
        "SubnetId": {
          "Ref": "subnet_private_c"
        }
      }
    },

    "iam_role_master": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "s3:AbortMultipartUpload",
                    "s3:DeleteObject",
                    "s3:GetBucketAcl",
                    "s3:GetBucketPolicy",
                    "s3:GetObject",
                    "s3:GetObjectAcl",
                    "s3:ListBucket",
                    "s3:ListBucketMultipartUploads",
                    "s3:ListMultipartUploadParts",
                    "s3:PutObject",
                    "s3:PutObjectAcl"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "bucket00ex"
                          },
                          "/*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "bucket00ex"
                          }
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:*"
                  ],
                  "Resource": [
                    {
                      "Ref": "AWS::StackId"
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Ref": "AWS::StackId"
                          },
                          "/*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:DescribeKeyPairs",
                    "ec2:DescribeSubnets",
                    "ec2:DescribeInstances",
                    "autoscaling:DescribeLaunchConfigurations",
                    "autoscaling:UpdateAutoScalingGroup",
                    "autoscaling:DescribeAutoScalingGroups",
                    "autoscaling:DescribeScalingActivities",
                    "elasticloadbalancing:DescribeLoadBalancers"
                  ],
                  "Resource": "*"
                }
              ]
            },
            "PolicyName": "root"
          }
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Effect": "Allow"
            }
          ]
        }
      }
    },
    "iam_role_agent": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:*"
                  ],
                  "Resource": [
                    {
                      "Ref": "AWS::StackId"
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Ref": "AWS::StackId"
                          },
                          "/*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:CreateTags",
                    "ec2:DescribeInstances",
                    "ec2:CreateVolume",
                    "ec2:DeleteVolume",
                    "ec2:AttachVolume",
                    "ec2:DetachVolume",
                    "ec2:DescribeVolumes",
                    "ec2:DescribeVolumeStatus",
                    "ec2:DescribeVolumeAttribute",
                    "ec2:CreateSnapshot",
                    "ec2:CopySnapshot",
                    "ec2:DeleteSnapshot",
                    "ec2:DescribeSnapshots",
                    "ec2:DescribeSnapshotAttribute",
                    "ec2:DescribeAvailabilityZones",
                    "ec2:DescribeInstances",
                    "ec2:DescribeTags",
                    "ec2:ModifySnapshotAttribute",
                    "ec2:ModifyVolume",
                    "ec2:ModifyVolumeAttribute",
                    "autoscaling:DescribeAutoScalingGroups",
                    "cloudwatch:PutMetricData",
                    "route53:ChangeResourceRecordSets",
                    "route53:ListResourceRecordSets",
                    "route53:ListHostedZonesByName",
                    "route53:GetChange",
                    "route53:TestDNSAnswer",
                    "ec2:CreateSecurityGroup",
                    "ec2:DeleteSecurityGroup",
                    "ec2:AuthorizeSecurityGroupIngress",
                    "elasticloadbalancing:*",
                    "ec2:DescribeSubnets",
                    "acm:ListCertificates"
                  ],
                  "Resource": "*"
                }
              ]
            },
            "PolicyName": "Slaves"
          },
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "sts:AssumeRole",
                  "Resource": "arn:aws:iam::435375411953:role/dev-qa-marketplace-access"
                }
              ]
            },
            "PolicyName": "marketplace"
          }
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Effect": "Allow"
            }
          ]
        }
      }
    },

    "iam_instanceprofile_master": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "iam_role_master"
          }
        ]
      }
    },
    "iam_instanceprofile_agent": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "iam_role_agent"
          }
        ]
      }
    },

    "internet_gateway": {
      "Type": "AWS::EC2::InternetGateway",
      "DependsOn": "vpc",
      "Properties": {
        "Tags": [
          {
            "Value": {
              "Ref": "AWS::StackName"
            },
            "Key": "Application"
          },
          {
            "Value": "Public",
            "Key": "Network"
          }
        ]
      }
    },
    "vpc_gateway_attachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "DependsOn": "internet_gateway",
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        },
        "InternetGatewayId": {
          "Ref": "internet_gateway"
        }
      }
    },

    "dhcp_options": {
      "Type": "AWS::EC2::DHCPOptions",
      "Properties": {
        "DomainNameServers": [
          "AmazonProvidedDNS"
        ],
        "DomainName": {
          "Fn::FindInMap": [
            "DNSMAPPING",
            {
              "Ref": "AWS::Region"
            },
            "NAME"
          ]
        }
      }
    },
    "vpc_dhcp_options_association": {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "DependsOn": "vpc",
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        },
        "DhcpOptionsId": {
          "Ref": "dhcp_options"
        }
      }
    },

    "network_acl_private": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        },
        "Tags": [
          {
            "Value": {
              "Ref": "AWS::StackName"
            },
            "Key": "Application"
          },
          {
            "Value": "Public",
            "Key": "Network"
          }
        ]
      }
    },
    "network_acl_public": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        },
        "Tags": [
          {
            "Value": {
              "Ref": "AWS::StackName"
            },
            "Key": "Application"
          },
          {
            "Value": "Public",
            "Key": "Network"
          }
        ]
      }
    },

    "network_acl_entry_private_egress": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "PortRange": {
          "From": "0",
          "To": "65535"
        },
        "RuleNumber": "100",
        "RuleAction": "allow",
        "NetworkAclId": {
          "Ref": "network_acl_private"
        },
        "Protocol": "-1",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "network_acl_entry_private_ingress": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "PortRange": {
          "From": "0",
          "To": "65535"
        },
        "RuleNumber": "100",
        "RuleAction": "allow",
        "NetworkAclId": {
          "Ref": "network_acl_private"
        },
        "Protocol": "-1",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0"
      }
    },

    "network_acl_entry_public_egress": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "PortRange": {
          "From": "0",
          "To": "65535"
        },
        "RuleNumber": "100",
        "RuleAction": "allow",
        "NetworkAclId": {
          "Ref": "network_acl_public"
        },
        "Protocol": "-1",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "network_acl_entry_public_ingress": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "PortRange": {
          "From": "0",
          "To": "65535"
        },
        "RuleNumber": "100",
        "RuleAction": "allow",
        "NetworkAclId": {
          "Ref": "network_acl_public"
        },
        "Protocol": "-1",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0"
      }
    },

    "subnet_network_acl_association_private_a": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "network_acl_private"
        },
        "SubnetId": {
          "Ref": "subnet_private_a"
        }
      }
    },
    "subnet_network_acl_association_private_b": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "network_acl_private"
        },
        "SubnetId": {
          "Ref": "subnet_private_b"
        }
      }
    },
    "subnet_network_acl_association_private_c": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "network_acl_private"
        },
        "SubnetId": {
          "Ref": "subnet_private_c"
        }
      }
    },

    "subnet_network_acl_association_public_a": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "network_acl_public"
        },
        "SubnetId": {
          "Ref": "subnet_public_a"
        }
      }
    },
    "subnet_network_acl_association_public_b": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "network_acl_public"
        },
        "SubnetId": {
          "Ref": "subnet_public_b"
        }
      }
    },
    "subnet_network_acl_association_public_c": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "network_acl_public"
        },
        "SubnetId": {
          "Ref": "subnet_public_c"
        }
      }
    },

    "route_table_private_a": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        },
        "Tags": [
          {
            "Value": {
              "Ref": "AWS::StackName"
            },
            "Key": "Application"
          },
          {
            "Value": "Public",
            "Key": "Network"
          }
        ]
      }
    },
    "route_table_private_b": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        },
        "Tags": [
          {
            "Value": {
              "Ref": "AWS::StackName"
            },
            "Key": "Application"
          },
          {
            "Value": "Public",
            "Key": "Network"
          }
        ]
      }
    },
    "route_table_private_c": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        },
        "Tags": [
          {
            "Value": {
              "Ref": "AWS::StackName"
            },
            "Key": "Application"
          },
          {
            "Value": "Public",
            "Key": "Network"
          }
        ]
      }
    },

    "route_table_public_a": {
      "Type": "AWS::EC2::RouteTable",
      "DependsOn": "vpc",
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        },
        "Tags": [
          {
            "Value": {
              "Ref": "AWS::StackName"
            },
            "Key": "Application"
          },
          {
            "Value": "Public",
            "Key": "Network"
          }
        ]
      }
    },
    "route_table_public_b": {
      "Type": "AWS::EC2::RouteTable",
      "DependsOn": "vpc",
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        },
        "Tags": [
          {
            "Value": {
              "Ref": "AWS::StackName"
            },
            "Key": "Application"
          },
          {
            "Value": "Public",
            "Key": "Network"
          }
        ]
      }
    },
    "route_table_public_c": {
      "Type": "AWS::EC2::RouteTable",
      "DependsOn": "vpc",
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        },
        "Tags": [
          {
            "Value": {
              "Ref": "AWS::StackName"
            },
            "Key": "Application"
          },
          {
            "Value": "Public",
            "Key": "Network"
          }
        ]
      }
    },

    "subnet_route_table_association_private_a": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "route_table_private_a"
        },
        "SubnetId": {
          "Ref": "subnet_private_a"
        }
      }
    },
    "subnet_route_table_association_private_b": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "route_table_private_b"
        },
        "SubnetId": {
          "Ref": "subnet_private_b"
        }
      }
    },
    "subnet_route_table_association_private_c": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "route_table_private_c"
        },
        "SubnetId": {
          "Ref": "subnet_private_c"
        }
      }
    },

    "subnet_route_table_association_public_a": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "route_table_public_a"
        },
        "SubnetId": {
          "Ref": "subnet_public_a"
        }
      }
    },
    "subnet_route_table_association_public_b": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "route_table_public_b"
        },
        "SubnetId": {
          "Ref": "subnet_public_b"
        }
      }
    },
    "subnet_route_table_association_public_c": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "route_table_public_c"
        },
        "SubnetId": {
          "Ref": "subnet_public_c"
        }
      }
    },

    "route_private_a0": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "route_table_private_a"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "nat_gateway_a"
        }
      }
    },
    "route_private_b0": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "route_table_private_b"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "nat_gateway_b"
        }
      }
    },
    "route_private_c0": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "route_table_private_c"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "nat_gateway_c"
        }
      }
    },

    "route_private_a1": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": {
          "Fn::FindInMap": [
            "VARIABLES",
            "NETWORK",
            "USEAST1VPC"
          ]
        },
        "RouteTableId": {
          "Ref": "route_table_private_a"
        },
        "VpcPeeringConnectionId": {
          "Fn::FindInMap": [
            "VARIABLES",
            "NETWORK",
            "USEAST1VPCPCID"
          ]
        }
      }
    },
    "route_private_b1": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": {
          "Fn::FindInMap": [
            "VARIABLES",
            "NETWORK",
            "USEAST1VPC"
          ]
        },
        "RouteTableId": {
          "Ref": "route_table_private_b"
        },
        "VpcPeeringConnectionId": {
          "Fn::FindInMap": [
            "VARIABLES",
            "NETWORK",
            "USEAST1VPCPCID"
          ]
        }
      }
    },
    "route_private_c1": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": {
          "Fn::FindInMap": [
            "VARIABLES",
            "NETWORK",
            "USEAST1VPC"
          ]
        },
        "RouteTableId": {
          "Ref": "route_table_private_c"
        },
        "VpcPeeringConnectionId": {
          "Fn::FindInMap": [
            "VARIABLES",
            "NETWORK",
            "USEAST1VPCPCID"
          ]
        }
      }
    },

    "route_public_a0": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "vpc_gateway_attachment",
      "Properties": {
        "RouteTableId": {
          "Ref": "route_table_public_a"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "internet_gateway"
        }
      }
    },
    "route_public_b0": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "vpc_gateway_attachment",
      "Properties": {
        "RouteTableId": {
          "Ref": "route_table_public_b"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "internet_gateway"
        }
      }
    },
    "route_public_c0": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "vpc_gateway_attachment",
      "Properties": {
        "RouteTableId": {
          "Ref": "route_table_public_c"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "internet_gateway"
        }
      }
    },

    "route_public_a1": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": {
          "Fn::FindInMap": [
            "VARIABLES",
            "NETWORK",
            "USEAST1VPC"
          ]
        },
        "RouteTableId": {
          "Ref": "route_table_public_a"
        },
        "VpcPeeringConnectionId": {
          "Fn::FindInMap": [
            "VARIABLES",
            "NETWORK",
            "USEAST1VPCPCID"
          ]
        }
      }
    },
    "route_public_b1": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": {
          "Fn::FindInMap": [
            "VARIABLES",
            "NETWORK",
            "USEAST1VPC"
          ]
        },
        "RouteTableId": {
          "Ref": "route_table_public_b"
        },
        "VpcPeeringConnectionId": {
          "Fn::FindInMap": [
            "VARIABLES",
            "NETWORK",
            "USEAST1VPCPCID"
          ]
        }
      }
    },
    "route_public_c1": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": {
          "Fn::FindInMap": [
            "VARIABLES",
            "NETWORK",
            "USEAST1VPC"
          ]
        },
        "RouteTableId": {
          "Ref": "route_table_public_c"
        },
        "VpcPeeringConnectionId": {
          "Fn::FindInMap": [
            "VARIABLES",
            "NETWORK",
            "USEAST1VPCPCID"
          ]
        }
      }
    },

    "rds_subnet_group_0": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "rds_db_instance_0 subnetgroup",
        "SubnetIds": [
          {
            "Ref": "subnet_private_a"
          },
          {
            "Ref": "subnet_private_b"
          },
          {
            "Ref": "subnet_private_c"
          }
        ]
      }
    },
    "rds_db_instance_0": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "VPCSecurityGroups": [
          {
            "Fn::GetAtt": [
              "security_group_agent_private",
              "GroupId"
            ]
          }
        ],
        "AllocatedStorage": {
          "Fn::FindInMap": [
            "VARIABLES",
            "RDS",
            "STORAGE"
          ]
        },
        "AllowMajorVersionUpgrade": "false",
        "AutoMinorVersionUpgrade": "false",
        "BackupRetentionPeriod": 7,
        "DBInstanceClass": {
          "Fn::FindInMap": [
            "VARIABLES",
            "RDS",
            "TYPE"
          ]
        },
        "DBInstanceIdentifier": {
          "Fn::FindInMap": [
            "VARIABLES",
            "RDS",
            "DBNAME"
          ]
        },
        "DBName": {
          "Fn::FindInMap": [
            "VARIABLES",
            "RDS",
            "DBNAME"
          ]
        },
        "DBParameterGroupName": "default.postgres9.6",
        "DBSubnetGroupName": {
          "Ref": "rds_subnet_group_0"
        },
        "Engine": "postgres",
        "EngineVersion": "9.6.1",
        "LicenseModel": "postgresql-license",
        "MasterUsername": {
          "Fn::FindInMap": [
            "VARIABLES",
            "RDS",
            "USER"
          ]
        },
        "MasterUserPassword": {
          "Fn::FindInMap": [
            "VARIABLES",
            "RDS",
            "PASSWORD"
          ]
        },
        "MultiAZ": "true",
        "OptionGroupName": "default:postgres-9-6",
        "Port": "5432",
        "PreferredBackupWindow": "12:00-13:00",
        "PreferredMaintenanceWindow": "sun:10:00-sun:11:00",
        "PubliclyAccessible": "false",
        "StorageEncrypted": "false",
        "StorageType": "standard",
        "Tags": [
          {
            "Key": "Name",
            "Value": "dcos-cloudmgr-db"
          }
        ]
      }
    },

    "launch_configuration_master": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": 1,
          "MinInstancesInService": 3,
          "MinSuccessfulInstancesPercent": 100,
          "PauseTime": "PT15M",
          "WaitOnResourceSignals": "true"
        }
      },
      "Properties": {
        "InstanceType": {
          "Fn::FindInMap": [
            "VARIABLES",
            "MASTER",
            "TYPE"
          ]
        },
        "KeyName": {
          "Fn::FindInMap": [
            "VARIABLES",
            "STACK",
            "KEYNAME"
          ]
        },
        "SecurityGroups": [
          {
            "Ref": "security_group_master"
          },
          {
            "Ref": "security_group_agent_adminzone"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              ["foo", "bar"]
            ]
          }
        },
        "IamInstanceProfile": {
          "Ref": "iam_instanceprofile_master"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "DeleteOnTermination": true,
              "VolumeSize": {
                "Fn::FindInMap": [
                  "VARIABLES",
                  "MASTER",
                  "ROOTDISK"
                ]
              },
              "VolumeType": "gp2"
            }
          }
        ],
        "AssociatePublicIpAddress": "true",
        "EbsOptimized": "true",
        "ImageId": {
          "Fn::FindInMap": [
            "CENTOS7AMI",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        }
      }
    },
    "launch_configuration_agent_private": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": 1,
          "MinInstancesInService": 3,
          "MinSuccessfulInstancesPercent": 100,
          "PauseTime": "PT15M",
          "WaitOnResourceSignals": "true"
        }
      },
      "Properties": {
        "InstanceType": {
          "Fn::FindInMap": [
            "VARIABLES",
            "PRIVATEAGENT",
            "TYPE"
          ]
        },
        "KeyName": {
          "Fn::FindInMap": [
            "VARIABLES",
            "STACK",
            "KEYNAME"
          ]
        },
        "SecurityGroups": [
          {
            "Ref": "security_group_agent_private"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              ["foo", "bar"]
            ]
          }
        },
        "IamInstanceProfile": {
          "Ref": "iam_instanceprofile_agent"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "DeleteOnTermination": true,
              "VolumeSize": {
                "Fn::FindInMap": [
                  "VARIABLES",
                  "PRIVATEAGENT",
                  "ROOTDISK"
                ]
              },
              "VolumeType": "gp2"
            }
          }
        ],
        "AssociatePublicIpAddress": "false",
        "EbsOptimized": "true",
        "ImageId": {
          "Fn::FindInMap": [
            "CENTOS7AMI",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        }
      }
    },
    "launch_configuration_agent_public": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": 1,
          "MinInstancesInService": 1,
          "MinSuccessfulInstancesPercent": 100,
          "PauseTime": "PT15M",
          "WaitOnResourceSignals": "true"
        }
      },
      "Properties": {
        "InstanceType": {
          "Fn::FindInMap": [
            "VARIABLES",
            "PUBLICAGENT",
            "TYPE"
          ]
        },
        "KeyName": {
          "Fn::FindInMap": [
            "VARIABLES",
            "STACK",
            "KEYNAME"
          ]
        },
        "SecurityGroups": [
          {
            "Ref": "security_group_agent_public"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              ["foo", "bar"]
            ]
          }
        },
        "IamInstanceProfile": {
          "Ref": "iam_instanceprofile_agent"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "DeleteOnTermination": true,
              "VolumeSize": {
                "Fn::FindInMap": [
                  "VARIABLES",
                  "PUBLICAGENT",
                  "ROOTDISK"
                ]
              },
              "VolumeType": "gp2"
            }
          }
        ],
        "AssociatePublicIpAddress": "true",
        "EbsOptimized": "true",
        "ImageId": {
          "Fn::FindInMap": [
            "CENTOS7AMI",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        }
      }
    },

    "autoscaling_group_master": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": {
            "Fn::FindInMap": [
              "VARIABLES",
              "TIMEOUT",
              "STACK"
            ]
          },
          "Count": {
            "Fn::FindInMap": [
              "VARIABLES",
              "MASTER",
              "COUNT"
            ]
          }
        }
      },
      "DependsOn": "vpc_gateway_attachment",
      "Properties": {
        "MinSize": {
          "Fn::FindInMap": [
            "VARIABLES",
            "MASTER",
            "COUNT"
          ]
        },
        "LoadBalancerNames": [
          {
            "Ref": "elb_master_external"
          },
          {
            "Ref": "elb_master_internal"
          }
        ],
        "DesiredCapacity": {
          "Fn::FindInMap": [
            "VARIABLES",
            "MASTER",
            "COUNT"
          ]
        },
        "VPCZoneIdentifier": [
          {
            "Ref": "subnet_public_a"
          },
          {
            "Ref": "subnet_public_b"
          },
          {
            "Ref": "subnet_public_c"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "launch_configuration_master"
        },
        "MaxSize": {
          "Fn::FindInMap": [
            "VARIABLES",
            "MASTER",
            "COUNT"
          ]
        },
        "Tags": [
          {
            "PropagateAtLaunch": "true",
            "Key": "Role",
            "Value": "dcos-master"
          }
        ]
      }
    },
    "autoscaling_group_agent_private": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": {
            "Fn::FindInMap": [
              "VARIABLES",
              "TIMEOUT",
              "STACK"
            ]
          },
          "Count": {
            "Fn::FindInMap": [
              "VARIABLES",
              "PRIVATEAGENT",
              "COUNT"
            ]
          }
        }
      },
      "DependsOn": "vpc_gateway_attachment",
      "Properties": {
        "MinSize": {
          "Fn::FindInMap": [
            "VARIABLES",
            "PRIVATEAGENT",
            "COUNT"
          ]
        },
        "DesiredCapacity": {
          "Fn::FindInMap": [
            "VARIABLES",
            "PRIVATEAGENT",
            "COUNT"
          ]
        },
        "VPCZoneIdentifier": [
          {
            "Ref": "subnet_private_a"
          },
          {
            "Ref": "subnet_private_b"
          },
          {
            "Ref": "subnet_private_c"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "launch_configuration_agent_private"
        },
        "MaxSize": {
          "Fn::FindInMap": [
            "VARIABLES",
            "PRIVATEAGENT",
            "COUNT"
          ]
        },
        "Tags": [
          {
            "PropagateAtLaunch": "true",
            "Key": "Role",
            "Value": "dcos-private-agent"
          }
        ]
      }
    },
    "autoscaling_group_agent_public": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": {
            "Fn::FindInMap": [
              "VARIABLES",
              "TIMEOUT",
              "STACK"
            ]
          },
          "Count": {
            "Fn::FindInMap": [
              "VARIABLES",
              "PUBLICAGENT",
              "COUNT"
            ]
          }
        }
      },
      "DependsOn": "vpc_gateway_attachment",
      "Properties": {
        "MinSize": {
          "Fn::FindInMap": [
            "VARIABLES",
            "PUBLICAGENT",
            "COUNT"
          ]
        },
        "LoadBalancerNames": [
          {
            "Ref": "elb_agent_public_external"
          },
          {
            "Ref": "elb_agent_public_internal"
          }
        ],
        "DesiredCapacity": {
          "Fn::FindInMap": [
            "VARIABLES",
            "PUBLICAGENT",
            "COUNT"
          ]
        },
        "VPCZoneIdentifier": [
          {
            "Ref": "subnet_public_a"
          },
          {
            "Ref": "subnet_public_b"
          },
          {
            "Ref": "subnet_public_c"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "launch_configuration_agent_public"
        },
        "MaxSize": {
          "Fn::FindInMap": [
            "VARIABLES",
            "PUBLICAGENT",
            "COUNT"
          ]
        },
        "Tags": [
          {
            "PropagateAtLaunch": "true",
            "Key": "Role",
            "Value": "dcos-public-agent"
          }
        ]
      }
    },

    "security_group_master": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        },
        "SecurityGroupIngress": [
          {
            "FromPort": "5050",
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Ref": "security_group_elb"
            },
            "ToPort": "5050"
          },
          {
            "FromPort": "80",
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Ref": "security_group_elb"
            },
            "ToPort": "80"
          },
          {
            "FromPort": "443",
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Ref": "security_group_elb"
            },
            "ToPort": "443"
          },
          {
            "FromPort": "8080",
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Ref": "security_group_elb"
            },
            "ToPort": "8080"
          },
          {
            "FromPort": "8181",
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Ref": "security_group_elb"
            },
            "ToPort": "8181"
          },
          {
            "FromPort": "2181",
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Ref": "security_group_elb"
            },
            "ToPort": "2181"
          },
          {
            "FromPort": "2379",
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Ref": "security_group_elb"
            },
            "ToPort": "2379"
          }
        ],
        "GroupDescription": "Mesos Masters"
      }
    },
    "security_group_agent_private": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        },
        "GroupDescription": "Mesos Private Agents"
      }
    },
    "security_group_agent_public": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        },
        "GroupDescription": "Mesos Public Agents"
      }
    },
    "security_group_agent_adminzone": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        },
        "SecurityGroupIngress": [
          {
            "FromPort": "22",
            "IpProtocol": "tcp",
            "CidrIp": {
              "Fn::FindInMap": [
                "VARIABLES",
                "STACK",
                "ADMINLOCATION"
              ]
            },
            "ToPort": "22"
          },
          {
            "FromPort": "80",
            "IpProtocol": "tcp",
            "CidrIp": {
              "Fn::FindInMap": [
                "VARIABLES",
                "STACK",
                "ADMINLOCATION"
              ]
            },
            "ToPort": "80"
          },
          {
            "FromPort": "443",
            "IpProtocol": "tcp",
            "CidrIp": {
              "Fn::FindInMap": [
                "VARIABLES",
                "STACK",
                "ADMINLOCATION"
              ]
            },
            "ToPort": "443"
          }
        ],
        "GroupDescription": "Enable Access from Admin Zone"
      }
    },
    "security_group_elb": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        },
        "GroupDescription": "Mesos Master ELB"
      }
    },

    "ingress00mas2mas": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "0",
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "security_group_master"
        },
        "GroupId": {
          "Ref": "security_group_master"
        },
        "ToPort": "65535"
      }
    },
    "ingress01pub2mas": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "0",
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "security_group_agent_public"
        },
        "GroupId": {
          "Ref": "security_group_master"
        },
        "ToPort": "65535"
      }
    },
    "ingress02pri2mas": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "0",
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "security_group_agent_private"
        },
        "GroupId": {
          "Ref": "security_group_master"
        },
        "ToPort": "65535"
      }
    },
    "ingress03pri2elb": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "2181",
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "security_group_agent_private"
        },
        "GroupId": {
          "Ref": "security_group_elb"
        },
        "ToPort": "2181"
      }
    },
    "ingress04pri2elb": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "2379",
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "security_group_agent_private"
        },
        "GroupId": {
          "Ref": "security_group_elb"
        },
        "ToPort": "2379"
      }
    },
    "ingress04mas2pri": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "0",
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "security_group_master"
        },
        "GroupId": {
          "Ref": "security_group_agent_private"
        },
        "ToPort": "65535"
      }
    },
    "ingress05pub2pri": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "0",
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "security_group_agent_public"
        },
        "GroupId": {
          "Ref": "security_group_agent_private"
        },
        "ToPort": "65535"
      }
    },
    "ingress06pri2pri": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "0",
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "security_group_agent_private"
        },
        "GroupId": {
          "Ref": "security_group_agent_private"
        },
        "ToPort": "65535"
      }
    },
    "ingress07mas2pub": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "0",
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "security_group_master"
        },
        "GroupId": {
          "Ref": "security_group_agent_public"
        },
        "ToPort": "65535"
      }
    },
    "ingress08pub2pub": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "0",
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "security_group_agent_public"
        },
        "GroupId": {
          "Ref": "security_group_agent_public"
        },
        "ToPort": "65535"
      }
    },
    "ingress09pri2pub": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "0",
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "security_group_agent_private"
        },
        "GroupId": {
          "Ref": "security_group_agent_public"
        },
        "ToPort": "65535"
      }
    },
    "ingress10pub01": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": "0.0.0.0/0",
        "FromPort": "0",
        "IpProtocol": "tcp",
        "GroupId": {
          "Ref": "security_group_agent_public"
        },
        "ToPort": "21"
      }
    },
    "ingress11pub02": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": "0.0.0.0/0",
        "FromPort": "23",
        "IpProtocol": "tcp",
        "GroupId": {
          "Ref": "security_group_agent_public"
        },
        "ToPort": "5050"
      }
    },
    "ingress12pub03": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": "0.0.0.0/0",
        "FromPort": "5052",
        "IpProtocol": "tcp",
        "GroupId": {
          "Ref": "security_group_agent_public"
        },
        "ToPort": "32000"
      }
    },
    "ingress13pub04": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": "0.0.0.0/0",
        "FromPort": "0",
        "IpProtocol": "udp",
        "GroupId": {
          "Ref": "security_group_agent_public"
        },
        "ToPort": "21"
      }
    },
    "ingress14pub05": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": "0.0.0.0/0",
        "FromPort": "23",
        "IpProtocol": "udp",
        "GroupId": {
          "Ref": "security_group_agent_public"
        },
        "ToPort": "5050"
      }
    },
    "ingress15pub06": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": "0.0.0.0/0",
        "FromPort": "5052",
        "IpProtocol": "udp",
        "GroupId": {
          "Ref": "security_group_agent_public"
        },
        "ToPort": "32000"
      }
    },

    "elb_master_external": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "DependsOn": "vpc_gateway_attachment",
      "Properties": {
        "Subnets": [
          {
            "Ref": "subnet_public_a"
          },
          {
            "Ref": "subnet_public_b"
          },
          {
            "Ref": "subnet_public_c"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "security_group_elb"
          },
          {
            "Ref": "security_group_agent_adminzone"
          }
        ],
        "Listeners": [
          {
            "LoadBalancerPort": "443",
            "Protocol": "SSL",
            "InstanceProtocol": "TCP",
            "InstancePort": "80",
            "SSLCertificateId": "arn:aws:acm:us-east-1:953558963498:certificate/098ad780-46be-47cc-bb9b-44e1679aced3"
          }
        ],
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "30",
          "UnhealthyThreshold": "2",
          "Timeout": "5",
          "Target": "TCP:5050"
        }
      }
    },
    "elb_master_internal": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Subnets": [
          {
            "Ref": "subnet_public_a"
          },
          {
            "Ref": "subnet_public_b"
          },
          {
            "Ref": "subnet_public_c"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "security_group_elb"
          },
          {
            "Ref": "security_group_agent_adminzone"
          },
          {
            "Ref": "security_group_agent_private"
          },
          {
            "Ref": "security_group_agent_public"
          },
          {
            "Ref": "security_group_master"
          }
        ],
        "Listeners": [
          {
            "LoadBalancerPort": "2379",
            "Protocol": "HTTP",
            "InstanceProtocol": "HTTP",
            "InstancePort": "2379"
          },
          {
            "LoadBalancerPort": "5050",
            "Protocol": "HTTP",
            "InstanceProtocol": "HTTP",
            "InstancePort": "5050"
          },
          {
            "LoadBalancerPort": "2181",
            "Protocol": "TCP",
            "InstanceProtocol": "TCP",
            "InstancePort": "2181"
          },
          {
            "LoadBalancerPort": "8181",
            "Protocol": "HTTP",
            "InstanceProtocol": "HTTP",
            "InstancePort": "8181"
          },
          {
            "LoadBalancerPort": "80",
            "Protocol": "TCP",
            "InstanceProtocol": "TCP",
            "InstancePort": "80"
          },
          {
            "LoadBalancerPort": "443",
            "Protocol": "TCP",
            "InstanceProtocol": "TCP",
            "InstancePort": "443"
          },
          {
            "LoadBalancerPort": "8080",
            "Protocol": "HTTP",
            "InstanceProtocol": "HTTP",
            "InstancePort": "8080"
          }
        ],
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "30",
          "UnhealthyThreshold": "2",
          "Timeout": "5",
          "Target": "TCP:5050"
        },
        "Scheme": "internal"
      }
    },
    "elb_agent_public_internal": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Subnets": [
          {
            "Ref": "subnet_public_a"
          },
          {
            "Ref": "subnet_public_b"
          },
          {
            "Ref": "subnet_public_c"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "security_group_elb"
          },
          {
            "Ref": "security_group_agent_adminzone"
          },
          {
            "Ref": "security_group_agent_private"
          },
          {
            "Ref": "security_group_agent_public"
          },
          {
            "Ref": "security_group_master"
          }
        ],
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "Protocol": "TCP",
            "InstanceProtocol": "TCP",
            "InstancePort": "80"
          },
          {
            "LoadBalancerPort": "443",
            "Protocol": "TCP",
            "InstanceProtocol": "TCP",
            "InstancePort": "443"
          },
          {
            "LoadBalancerPort": "8086",
            "Protocol": "TCP",
            "InstanceProtocol": "TCP",
            "InstancePort": "8086"
          }
        ],
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "30",
          "UnhealthyThreshold": "2",
          "Timeout": "5",
          "Target": "TCP:80"
        },
        "Scheme": "internal"
      }
    },
    "elb_agent_public_external": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "DependsOn": "vpc_gateway_attachment",
      "Properties": {
        "Subnets": [
          {
            "Ref": "subnet_public_a"
          },
          {
            "Ref": "subnet_public_b"
          },
          {
            "Ref": "subnet_public_c"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "security_group_agent_public"
          }
        ],
        "Listeners": [
          {
            "LoadBalancerPort": "443",
            "Protocol": "SSL",
            "InstanceProtocol": "TCP",
            "InstancePort": "10080",
            "SSLCertificateId": "arn:aws:acm:us-east-1:953558963498:certificate/098ad780-46be-47cc-bb9b-44e1679aced3"
          },
          {
            "LoadBalancerPort": "4443",
            "Protocol": "SSL",
            "InstanceProtocol": "TCP",
            "InstancePort": "10084",
            "SSLCertificateId": "arn:aws:acm:us-east-1:953558963498:certificate/098ad780-46be-47cc-bb9b-44e1679aced3"
          },
          {
            "LoadBalancerPort": "5443",
            "Protocol": "SSL",
            "InstanceProtocol": "TCP",
            "InstancePort": "10085",
            "SSLCertificateId": "arn:aws:acm:us-east-1:953558963498:certificate/098ad780-46be-47cc-bb9b-44e1679aced3"
          },
          {
            "LoadBalancerPort": "8443",
            "Protocol": "SSL",
            "InstanceProtocol": "TCP",
            "InstancePort": "10090",
            "SSLCertificateId": "arn:aws:acm:us-east-1:953558963498:certificate/098ad780-46be-47cc-bb9b-44e1679aced3"
          }
        ],
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "5",
          "UnhealthyThreshold": "2",
          "Timeout": "2",
          "Target": "HTTP:9090/_haproxy_health_check"
        }
      }
    }
  }
}
